{"version":3,"sources":["Hooks/useResizeObserver.js","Charts/Race/RaceChart.js","Hooks/useInterval.js","Charts/Race/Race.js","Charts/Line/LineChart.js","Charts/ChildSelection.js","Charts/Line/Line.js","Charts/Bar/BarChart.js","Charts/Bar/Bar.js","Charts/World/WorldMap.js","Charts/World/World.js","Charts/Selection.js","Charts/info.js","Charts/Charts.js","App.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","target","current","resizeObserver","ResizeObserver","el","forEach","e","contentRect","observe","unobserve","RaceChart","data","currDate","svgRef","startDate","useRef","wrapperDivRef","svg","select","width","height","yScale","scaleBand","paddingInner","domain","map","v","i","range","xScale","scaleLinear","max","value","accent","scaleOrdinal","schemePastel2","selectAll","country","join","enter","append","attr","d","bandwidth","transition","duration","ease","easeLinear","style","tween","interpolate","this","textContent","replace","t","text","Math","round","toLocaleString","formatTime","timeFormat","interpolateDate","Date","useInterval","func","time","savedFunc","inst","setInterval","clearInterval","Race","inputData","endDate","type","setCurrDate","begin","setData","Object","keys","length","entries","filter","date","getTime","sort","a","b","slice","setDate","getDate","className","LineChart","days","console","log","xAxisRef","yAxisRef","margin","lines","setLines","scaleTime","lineG","line","xAxis","axisBottom","scale","tickFormat","yAxis","axisLeft","dateDomain","extent","confirmedMax","confirmed","x","y","deaths","recovered","call","fill","stroke","strokeWidth","ChildSelection","types","btnClick","val","index","key","onClick","Line","setType","preventDefault","p","BarChart","input","bar","inputMax","Bar","WorldMap","world","sel","setSel","colorRange","midRange","minV","min","maxV","projection","geoMercator","fitSize","precision","pathGen","geoPath","features","on","f","properties","name","getColors","marginBottom","backgroundColor","World","land","Selection","updateCountry","updateDays","countries","maxDays","onChange","c","Array","Info","count","toDateString","Charts","props","latestDataset","setLatestDataset","setStartDate","setEndDate","setCountry","setDays","setMaxDays","setCountries","setTypes","setCount","dataset","arr","split","defaultCountryObj","totalDays","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf999be4.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst useResizeObserver = ref => {\n    const [dimensions, setDimensions] = useState(null)\n    useEffect(() => {\n        const target = ref.current\n        const resizeObserver = new ResizeObserver((el) => {\n            el.forEach(e => {\n                setDimensions(e.contentRect)\n            })\n        })\n        resizeObserver.observe(target)\n        return () => {\n            resizeObserver.unobserve(target)\n        }\n    }, [ref])\n    return dimensions;\n}\n\nexport default useResizeObserver","import React, {useEffect, useRef} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleBand, scaleLinear, scaleOrdinal} from 'd3-scale'\nimport {max} from 'd3-array'\nimport {easeLinear} from 'd3-ease'\nimport {schemePastel2} from 'd3-scale-chromatic'\nimport {interpolate, interpolateDate} from 'd3-interpolate'\nimport {timeFormat} from 'd3-time-format'\n// eslint-disable-next-line no-unused-vars\nimport {transition} from \"d3-transition\";\n\n\nfunction RaceChart({data, currDate, startDate}) {\n    const svgRef = useRef()\n    const wrapperDivRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    useEffect(() => {\n        const svg = select(svgRef.current)\n        if (!dimensions) return\n        const {width, height} = dimensions;\n        const yScale = scaleBand()\n            .paddingInner(0.1)\n            .domain(data.map((v, i) => i))\n            .range([0, dimensions.height])\n\n        const xScale = scaleLinear()\n            .domain([0, max(data, e => e.value)])\n            .range([0, dimensions.width])\n        var accent = scaleOrdinal(schemePastel2);\n        svg\n            .selectAll('.bar')\n            .data(data, (e, i) => e.country)\n            .join(enter => enter.append('rect').attr('y', (v, i) => yScale(i))\n                .attr('width', e => xScale(e.value))\n            )\n            .attr('class', 'bar')\n            .attr('fill', d => accent(d.value))\n            .attr('x', 0)\n            .attr('height', yScale.bandwidth())\n            .transition()\n            .attr('width', e => xScale(e.value))\n            .attr('y', (v, i) => yScale(i))\n            .duration(1000)\n            .ease(easeLinear)\n\n        svg.selectAll('.label')\n            .data(data, (e, i) => e.country)\n            .join(enter => enter.append('text').attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.4)\n            )\n            .attr('class', 'label')\n            .attr('x', 10)\n            .style('font-size', '13px')\n            .transition()\n            .duration(1000)\n            .ease(easeLinear)\n            .attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.4)\n            .tween(\"text\", function (d) {\n                let i = interpolate(+(this.textContent.replace(',', '')), d.value);\n                return function (t) {\n                    select(this).text(Math.round(i(t)).toLocaleString());\n                };\n            });\n\n\n        svg.selectAll('.label2')\n            .data(data, (e, i) => e.country)\n            .join(enter => enter.append('text').attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.8)\n            )\n            .attr('class', 'label2')\n            .attr('x', 10)\n            .text(e => `${e.country}`)\n            .style('font-size', '13px')\n            .transition()\n            .duration(1000)\n            .ease(easeLinear)\n            .attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.8)\n        var formatTime = timeFormat(\"%a %d %b, %y %H:%M\");\n        svg.selectAll('.l3')\n            .data([currDate])\n            .join('text')\n            .attr('class', 'l3')\n            .style('font-size', '23px')\n            .attr('x', width - 250)\n            .attr('y', height - 150)\n            .text(d => formatTime(d))\n            .transition()\n            .duration(1000)\n            .ease(easeLinear)\n            .tween(\"text\", function (d) {\n                let i = interpolateDate(new Date(this.textContent), d);\n                return function (t) {\n                    select(this).text(formatTime(i(t)));\n                };\n            });\n\n\n    }, [currDate, data, dimensions])\n\n    return (\n        <div ref={wrapperDivRef}>\n            <svg ref={svgRef}>\n            </svg>\n        </div>\n    );\n}\n\nexport default RaceChart;","import {useEffect, useRef} from \"react\";\n\nconst useInterval = (func, time) => {\n\n    const savedFunc = useRef()\n\n    useEffect(() => {\n        savedFunc.current = func\n    }, [func])\n\n    useEffect(() => {\n        const tick = () => savedFunc.current()\n        if (time !== null) {\n            let inst = setInterval(tick, time)\n            return () => clearInterval(inst)\n        }\n\n\n    }, [time])\n}\n\nexport default useInterval","import React, {useEffect, useState} from 'react';\nimport RaceChart from \"./RaceChart\";\nimport useInterval from \"../../Hooks/useInterval\";\n\nfunction Race({inputData, startDate, endDate}) {\n\n    const [type, setType] = useState('confirmed')\n    const [currDate, setCurrDate] = useState(startDate)\n    const [begin, setBegin] = useState(true)\n    const [data, setData] = useState({})\n\n    useEffect(() => {\n        if(!inputData || Object.keys(inputData).length<1) return\n\n        setData(Object.entries(inputData)\n            .map(d => {\n                return ({\n                    country: d[0],\n                    value: d[1].filter(d =>{\n                            return d.date.getTime() === currDate.getTime()\n                        }\n                    )[0][type]\n                })\n            })\n            .sort((a, b) => b.value - a.value)\n            .slice(0, 10))\n\n    }, [currDate, type, inputData])\n\n    useInterval(() => {\n        if (begin && !(currDate.getTime() === endDate.getTime())) {\n            setCurrDate(new Date(currDate.setDate(currDate.getDate() + 1)))\n        }\n    }, 1000)\n\n    if (Object.keys(data).length < 1) return ('Loading...')\n    return (\n        <div className='raceD'>\n\n            <RaceChart data={data} startDate={startDate} currDate={currDate}/>\n\n        </div>\n    );\n}\n\nexport default Race;","import React, {useEffect, useRef, useState} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleLinear, scaleTime} from 'd3-scale'\nimport {extent, max} from 'd3-array'\nimport {timeFormat} from 'd3-time-format'\nimport {axisBottom, axisLeft} from 'd3-axis'\nimport {line} from 'd3-shape'\n\nfunction LineChart({data, days, type}) {\n    console.log(type)\n    const svgRef = useRef()\n    const xAxisRef = useRef()\n    const yAxisRef = useRef()\n    const wrapperDivRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 50,\n        right: 5\n    }\n    const [lines, setLines] = useState({})\n\n\n    useEffect(()=>{\n        const svg = select(svgRef.current)\n        if(!dimensions)return\n        const { width, height } = dimensions;\n\n        const xScale = scaleTime().range([margin.left, width - margin.right]);\n        const yScale = scaleLinear().range([height - margin.bottom, margin.top]);\n        const lineG = line()\n        const xAxis = axisBottom().scale(xScale)\n            .tickFormat(timeFormat('%d %b'))\n        const yAxis = axisLeft().scale(yScale);\n\n        data = data.slice(-days);\n        const dateDomain = extent(data, d => d.date);\n        const confirmedMax = max(data, d => d.confirmed);\n        xScale.domain(dateDomain)\n        yScale.domain([0, confirmedMax])\n        lineG.x(d => xScale(d.date))\n        lineG.y(d => yScale(d.confirmed))\n        const confirmed = (lineG(data))\n        lineG.y(d => yScale(d.deaths))\n        const deaths =(lineG(data))\n        lineG.y(d => yScale(d.recovered))\n        const recovered =(lineG(data))\n        setLines({confirmed: confirmed, deaths: deaths, recovered: recovered})\n        select(xAxisRef.current).call(xAxis).attr('transform',`translate(0,${height-margin.bottom})`);\n        select(yAxisRef.current).call(yAxis).attr('transform',`translate(${margin.left},0)`);\n\n\n    },[data, type, dimensions])\n\n    return (\n        <div ref={wrapperDivRef}>\n            <svg ref={svgRef}>\n                {Object.keys(type).map(b => type[b] ? (\n                        <path d={lines[b]} fill='none' stroke='black' strokeWidth='2.5px'/>\n                    ) : ''\n                )}\n                <g>\n                    <g ref={xAxisRef} />\n                    <g ref={yAxisRef} />\n                </g>\n            </svg>\n        </div>\n    );\n}\n\nexport default LineChart;","import React from 'react';\n\nfunction ChildSelection({types , btnClick}) {\n    return (\n        <div>\n            {types.map((val,index) => (\n                    <button key={index} onClick={btnClick} value={val}>{val}</button>\n                )\n            )}\n        </div>\n    );\n}\n\nexport default ChildSelection;","import React, {useEffect, useState} from 'react';\nimport LineChart from \"./LineChart\";\nimport ChildSelection from \"../ChildSelection\";\n\nfunction Line({inputData, days, types}) {\n\n    const [type, setType] = useState({})\n    const updateType = (e) => {\n        e.preventDefault()\n        setType(p=>({\n            ...p,\n            [e.target.value] : !p[e.target.value]\n        }))\n    }\n    useEffect(() => {\n\n        setType({ [types[0]] : true})\n    }, [inputData, types])\n\n\n\n    if (Object.keys(inputData).length < 1) return ('Loading...')\n    return (\n        <div className='barD'>\n\n            <ChildSelection types={types} btnClick={updateType}/>\n\n            <LineChart data={inputData} days={days} type={type}/>\n\n        </div>\n    );\n}\n\nexport default Line;","import React, {useEffect, useRef} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleLinear, scaleTime} from 'd3-scale'\nimport {extent, max} from 'd3-array'\nimport {timeFormat} from 'd3-time-format'\nimport {axisBottom, axisLeft} from 'd3-axis'\n\n\nfunction BarChart({data, days, type}) {\n    const svgRef = useRef()\n    const wrapperDivRef = useRef()\n    const xAxisRef = useRef()\n    const yAxisRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 50,\n        right: 5\n    }\n    useEffect(() => {\n        const svg = select(svgRef.current)\n        if (!dimensions) return\n        const {width, height} = dimensions;\n\n        data = data.slice(-days)\n        data = data.map(d => {\n            return {\n                date: d.date,\n                input: d[type]\n            }\n        });\n        const gap = 1.15;\n        const bar = (width - margin.left - margin.right) / data.length / gap;\n        const xScale = scaleTime().range([margin.left, width - margin.right]);\n        const yScale = scaleLinear().range([height - margin.bottom, margin.top]);\n        const xAxis = axisBottom().scale(xScale)\n            .tickFormat(timeFormat('%d %b'))\n        const yAxis = axisLeft().scale(yScale);\n        const dateDomain = extent(data, d => d.date);\n        const inputMax = max(data, d => d.input);\n        xScale.domain(dateDomain)\n        yScale.domain([0, inputMax])\n\n        select(xAxisRef.current)\n            .call(xAxis)\n            .attr('transform', `translate(0,${height - margin.bottom})`);\n\n        select(yAxisRef.current)\n            .call(yAxis)\n            .attr('transform', `translate(${margin.left},0)`);\n\n        svg\n            .selectAll('.rect')\n            .data(data)\n            .join(enter => enter.append('rect'))\n            .attr('class', 'rect')\n            .attr('x', (d, i) => margin.left + (i * bar * gap))\n            .attr('y', d => {\n                return yScale(d.input)\n            })\n            .style('fill', 'blue')\n            .attr('height', d => {\n                return height - yScale(d.input) - margin.bottom\n            })\n            .attr('width', bar)\n\n\n    }, [data, days, dimensions, type])\n\n    return (\n        <div ref={wrapperDivRef}>\n            <svg ref={svgRef}>\n                <g>\n                    <g ref={xAxisRef}/>\n                    <g ref={yAxisRef}/>\n                </g>\n            </svg>\n        </div>\n    );\n}\n\nexport default BarChart;","import React, {useEffect, useState} from 'react';\nimport BarChart from \"./BarChart\";\nimport ChildSelection from \"../ChildSelection\";\n\nfunction Bar({inputData, days, types}) {\n\n    const [data, setData] = useState({})\n    const [type, setType] = useState(null)\n    const updateType = (e) => {\n        e.preventDefault()\n        setType(e.target.value)\n    }\n    useEffect(() => {\n        setData(inputData)\n        setType(types[0])\n    }, [types, inputData])\n\n\n    if (Object.keys(inputData).length < 1) return ('Loading...')\n    return (\n        <div className='barD'>\n\n            <ChildSelection types={types} btnClick={updateType}/>\n\n            <BarChart data={data} type={type} days={days}/>\n\n        </div>\n    );\n}\n\nexport default Bar;","import React, {useEffect, useRef, useState} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleLinear} from 'd3-scale'\nimport {max, min} from 'd3-array'\nimport {geoMercator, geoPath} from 'd3-geo'\n\nfunction WorldMap({data, type, world}) {\n    const svgRef = useRef()\n    const wrapperDivRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    const [sel, setSel] = useState(null)\n    const colorRange = {\n        confirmed: ['#ffffff', '#5777C0', '#365BB0'],\n        deaths: ['#ffffff', '#FF6464', '#FF3939'],\n        recovered: ['#ffffff', '#55D955', '#2FCF2F']\n    }\n    const midRange = {\n        confirmed: 30000,\n        deaths: 5000,\n        recovered: 20000\n    }\n\n    useEffect(() => {\n        if (!dimensions) return\n        const svg = select(svgRef.current)\n        const minV = min(Object.entries(data), d => d[1][0][type]);\n        const maxV = max(Object.entries(data), d => d[1][0][type]);\n\n\n        const getColors = (country, type) => {\n            const scale = scaleLinear().domain([minV,midRange[type],maxV]).range(colorRange[type])\n            return scale(data[country][0][type])\n        }\n\n        const projection = geoMercator()\n            .fitSize([dimensions.width, dimensions.height], sel || world)\n            .precision(100)\n\n\n        const pathGen = geoPath().projection(projection)\n\n\n        svg.selectAll('.country')\n            .data(world.features)\n            .join('path')\n            .on('click', d => {\n                return setSel(sel === d ? null : d)\n            })\n            .attr('class', 'country')\n            .transition()\n            .attr('fill', f =>\n                (data[f.properties.name]) ? getColors(f.properties.name, type)\n                    : '#fff'\n            )\n            .attr('d', f => pathGen(f))\n\n        svg.selectAll(\".label\")\n            .data([sel])\n            .join('text')\n            .attr('class', 'label')\n            .text(\n                f =>\n                    f &&\n                    f.properties.name + ': ' + ((data[f.properties.name]) ? (data[f.properties.name][0][type])\n                    : 0)\n            )\n            .attr('x', 10)\n            .attr('y', 25)\n\n    }, [data, dimensions, type, world, sel])\n\n    return (\n        <div ref={wrapperDivRef} style={{marginBottom: '2rem'}}>\n            <svg ref={svgRef} style={{backgroundColor: '#c5e8ff'}}>\n            </svg>\n        </div>\n    );\n}\n\nexport default WorldMap;","import React, {useEffect, useState} from 'react';\nimport WorldMap from \"./WorldMap\";\nimport land from '../../world.json'\nimport ChildSelection from \"../ChildSelection\";\n\nfunction World({inputData, types}) {\n\n    const [data, setData] = useState({})\n    const [type, setType] = useState(null)\n    useEffect(() => {\n        setData(inputData)\n        setType(types[0])\n    }, [inputData, types])\n    const updateType = (e) => {\n        e.preventDefault()\n        setType(e.target.value)\n    }\n    if (Object.keys(data).length < 1) return ('Loading...')\n    return (\n        <div>\n            <h1> World Map Geo</h1>\n            <ChildSelection types={types} btnClick={updateType}/>\n            <WorldMap data={data} world={land} type={type}/>\n        </div>\n    );\n}\n\nexport default World;","import React from 'react';\n\nfunction Selection({ updateCountry, updateDays , country, days, countries, maxDays}) {\n    return (\n        <div>\n            <select onChange={updateCountry} value={country}>\n                {\n                    countries.map(c => {\n                        return (<option key={c} value={c}>{c}</option>);\n                    })\n                }\n            </select>\n\n            <select onChange={updateDays} value={days}>\n\n                {\n                    [...Array(maxDays+1).keys()].map((i) => {\n                        return (<option key={i+1} value={i+1}>{i+1} Days</option>);\n                    })\n                }\n            </select>\n        </div>\n    );\n}\n\nexport default Selection;","import React from 'react';\n\nfunction Info({endDate, count}) {\n    return (\n        <div> emojiss\ndata as of : {endDate.toDateString()}\ntotal cases : {count.confirmed}\nrecovered : {count.recovered}\ndeaths : {count.deaths}\ncurrently infected : {count.confirmed - count.recovered - count.deaths}\n        </div>\n    );\n}\n\nexport default Info;","import React, {useEffect, useState} from 'react';\nimport dataset from '../timeseries.json'\nimport Race from \"./Race/Race\";\nimport Line from \"./Line/Line\";\nimport Bar from \"./Bar/Bar\";\nimport World from \"./World/World\";\nimport Selection from \"./Selection\";\nimport {count} from \"d3-array\";\nimport Info from \"./info\";\nimport end from \"d3-transition/src/transition/end\";\n\nfunction Charts(props) {\n\n    const [data, setData] = useState({})\n    const [latestDataset, setLatestDataset] = useState({})\n    const [startDate, setStartDate] = useState(null)\n    const [endDate, setEndDate] = useState(null)\n    const [country, setCountry] = useState(null)\n    const [days, setDays] = useState(0)\n    const [maxDays, setMaxDays] = useState(0)\n    const [countries, setCountries] = useState([])\n    const [types, setTypes] = useState([])\n    const [count,setCount] = useState({})\n\n\n    useEffect(() => {\n        const defaultCountry = 'Canada'\n        const latestDataset = {}\n        let count = {\n            confirmed : 0,\n            deaths : 0,\n            recovered : 0\n        }\n\n        for (const key in dataset) {\n            latestDataset[key] = dataset[key].filter((d, i, arr) => {\n                if((i === arr.length - 1)) Object.keys(d).slice(1).forEach(a=>count[a] += d[a])\n                let date = d.date.split(\"-\");\n                d.date = new Date(date[0], date[1]-1, date[2]);\n                return (i === arr.length - 1)\n            })\n\n\n        }\n        setCount(count)\n\n        const defaultCountryObj = dataset[defaultCountry];\n        const totalDays = defaultCountryObj.length\n        const startDate = defaultCountryObj[0].date\n        const endDate = defaultCountryObj[totalDays - 1].date\n        setTypes(Object.keys(defaultCountryObj[0]).slice(1))\n        setStartDate(startDate)\n        setEndDate(endDate)\n        setData(dataset)\n        setLatestDataset(latestDataset)\n        setCountry(defaultCountry)\n        setDays(Math.round(totalDays/2))\n        setMaxDays(totalDays)\n        setCountries(Object.keys(dataset))\n\n    }, [])\n    const updateCountry = (e) => setCountry(e.target.value)\n\n    const updateDays = (e) => setDays(e.target.value)\n\n\n\n    if (Object.keys(data).length < 1) return ('loading')\n\n    return (\n        <div className='charts'>\n            <Info endDate={endDate} count={count}/>\n            <Race inputData={data} startDate={startDate} endDate={endDate}/>\n            <Selection updateCountry={updateCountry} updateDays={updateDays} country={country} days={days} countries={countries} maxDays={maxDays}/>\n            <Line inputData={data[country]} days={days} types={types}/>\n            <Bar inputData={data[country]} days={days} types={types}/>\n            <World inputData={latestDataset} types={types}/>\n        </div>\n    );\n}\n\nexport default Charts;","import React from 'react';\nimport Charts from \"./Charts/Charts\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <header>\n              COVID-19 Dashboard\n              <a href=\"https://github.com/techie448/covid19\">github</a>\n          </header>\n          <Charts/>\n          <footer>\n              Rishabh Kharbanda\n              made with love ..technol..\n          </footer>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}