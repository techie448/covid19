{"version":3,"sources":["Hooks/useResizeObserver.js","Charts/Race/RaceChart.js","Hooks/useInterval.js","Charts/Race/Race.js","Charts/Line/LineChart.js","Charts/Line/Line.js","Charts/Bar/BarChart.js","Charts/Bar/Bar.js","Charts/World/WorldMap.js","Charts/World/World.js","Charts.js","App.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","target","current","resizeObserver","ResizeObserver","el","forEach","e","contentRect","observe","unobserve","RaceChart","data","currDate","svgRef","startDate","useRef","wrapperDivRef","svg","select","width","height","yScale","scaleBand","paddingInner","domain","map","v","i","range","xScale","scaleLinear","max","value","accent","scaleOrdinal","schemePastel2","selectAll","country","join","enter","append","attr","d","bandwidth","transition","duration","ease","easeLinear","style","tween","interpolate","this","textContent","replace","t","text","Math","round","toLocaleString","formatTime","timeFormat","interpolateDate","Date","useInterval","func","time","savedFunc","inst","setInterval","clearInterval","Race","inputData","endDate","type","setCurrDate","begin","setData","Object","entries","filter","date","getTime","sort","a","b","slice","setDate","getDate","keys","length","className","LineChart","days","xAxisRef","yAxisRef","margin","scaleTime","lineG","line","xAxis","axisBottom","scale","tickFormat","yAxis","axisLeft","dateDomain","extent","confirmedMax","confirmed","x","y","deaths","recovered","call","Line","BarChart","input","bar","inputMax","Bar","WorldMap","world","sel","setSel","minV","min","maxV","cscale","projection","geoMercator","fitSize","precision","pathGen","geoPath","features","on","f","properties","name","marginBottom","backgroundColor","World","land","Charts","props","latestDataset","setLatestDataset","setStartDate","setEndDate","key","dataset","arr","defaultCountryObj","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08d3ab17.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst useResizeObserver = ref => {\n    const [dimensions, setDimensions] = useState(null)\n    useEffect(() => {\n        const target = ref.current\n        const resizeObserver = new ResizeObserver((el) => {\n            el.forEach(e => {\n                setDimensions(e.contentRect)\n            })\n        })\n        resizeObserver.observe(target)\n        return () => {\n            resizeObserver.unobserve(target)\n        }\n    }, [ref])\n    return dimensions;\n}\n\nexport default useResizeObserver","import React, {useEffect, useRef} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleBand, scaleLinear, scaleOrdinal} from 'd3-scale'\nimport {max} from 'd3-array'\nimport {easeLinear} from 'd3-ease'\nimport {schemePastel2} from 'd3-scale-chromatic'\nimport {interpolate, interpolateDate} from 'd3-interpolate'\nimport {timeFormat} from 'd3-time-format'\n\n\nfunction RaceChart({data, currDate, startDate}) {\n    const svgRef = useRef()\n    const wrapperDivRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    useEffect(() => {\n        const svg = select(svgRef.current)\n        if (!dimensions) return\n        const {width, height} = dimensions;\n        const yScale = scaleBand()\n            .paddingInner(0.1)\n            .domain(data.map((v, i) => i))\n            .range([0, dimensions.height])\n\n        const xScale = scaleLinear()\n            .domain([0, max(data, e => e.value)])\n            .range([0, dimensions.width])\n        var accent = scaleOrdinal(schemePastel2);\n        svg\n            .selectAll('.bar')\n            .data(data, (e, i) => e.country)\n            .join(enter => enter.append('rect').attr('y', (v, i) => yScale(i))\n                .attr('width', e => xScale(e.value))\n            )\n            .attr('class', 'bar')\n            .attr('fill', d => accent(d.value))\n            .attr('x', 0)\n            .attr('height', yScale.bandwidth())\n            .transition()\n            .attr('width', e => xScale(e.value))\n            .attr('y', (v, i) => yScale(i))\n            .duration(1000)\n            .ease(easeLinear)\n\n        svg.selectAll('.label')\n            .data(data, (e, i) => e.country)\n            .join(enter => enter.append('text').attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.4)\n            )\n            .attr('class', 'label')\n            .attr('x', 10)\n            .style('font-size', '13px')\n            .transition()\n            .duration(1000)\n            .ease(easeLinear)\n            .attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.4)\n            .tween(\"text\", function (d) {\n                let i = interpolate(+(this.textContent.replace(',', '')), d.value);\n                return function (t) {\n                    select(this).text(Math.round(i(t)).toLocaleString());\n                };\n            });\n\n\n        svg.selectAll('.label2')\n            .data(data, (e, i) => e.country)\n            .join(enter => enter.append('text').attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.8)\n            )\n            .attr('class', 'label2')\n            .attr('x', 10)\n            .text(e => `${e.country}`)\n            .style('font-size', '13px')\n            .transition()\n            .duration(1000)\n            .ease(easeLinear)\n            .attr('y', (e, i) => yScale(i) + yScale.bandwidth() * 0.8)\n        var formatTime = timeFormat(\"%a %d %b, %y %H:%M\");\n        svg.selectAll('.l3')\n            .data([currDate])\n            .join('text')\n            .attr('class', 'l3')\n            .style('font-size', '23px')\n            .attr('x', width - 250)\n            .attr('y', height - 150)\n            .text(d => formatTime(d))\n            .transition()\n            .duration(1000)\n            .ease(easeLinear)\n            .tween(\"text\", function (d) {\n                let i = interpolateDate(new Date(this.textContent), d);\n                return function (t) {\n                    select(this).text(formatTime(i(t)));\n                };\n            });\n\n\n    }, [currDate, data, dimensions])\n\n    return (\n        <div ref={wrapperDivRef}>\n            <svg ref={svgRef}>\n            </svg>\n        </div>\n    );\n}\n\nexport default RaceChart;","import {useEffect, useRef} from \"react\";\n\nconst useInterval = (func, time) => {\n\n    const savedFunc = useRef()\n\n    useEffect(() => {\n        savedFunc.current = func\n    }, [func])\n\n    useEffect(() => {\n        const tick = () => savedFunc.current()\n        if (time !== null) {\n            let inst = setInterval(tick, time)\n            return () => clearInterval(inst)\n        }\n\n\n    }, [time])\n}\n\nexport default useInterval","import React, {useEffect, useState} from 'react';\nimport RaceChart from \"./RaceChart\";\nimport useInterval from \"../../Hooks/useInterval\";\n\nfunction Race({inputData, startDate, endDate}) {\n\n    const [type, setType] = useState('confirmed')\n    const [currDate, setCurrDate] = useState(startDate)\n    const [begin, setBegin] = useState(true)\n    const [data, setData] = useState({})\n\n    useEffect(() => {\n        setData(Object.entries(inputData)\n            .map(d => ({\n                country: d[0],\n                value: d[1].filter(d =>\n                    d.date.getTime() === currDate.getTime()\n                )[0][type]\n            }))\n            .sort((a, b) => b.value - a.value)\n            .slice(0, 10))\n    }, [currDate, type, inputData])\n\n    useInterval(() => {\n        if (begin && !(currDate.getTime() === endDate.getTime())) {\n            setCurrDate(new Date(currDate.setDate(currDate.getDate() + 1)))\n        }\n    }, 1000)\n\n    if (Object.keys(data).length < 1) return ('Loading...')\n    return (\n        <div className='raceD'>\n\n            <RaceChart data={data} startDate={startDate} currDate={currDate}/>\n\n        </div>\n    );\n}\n\nexport default Race;","import React, {useEffect, useRef} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleLinear, scaleTime} from 'd3-scale'\nimport {extent, max} from 'd3-array'\nimport {timeFormat} from 'd3-time-format'\nimport {axisBottom, axisLeft} from 'd3-axis'\nimport {line} from 'd3-shape'\n\nfunction LineChart({data, days, type}) {\n    const svgRef = useRef()\n    const xAxisRef = useRef()\n    const yAxisRef = useRef()\n    const wrapperDivRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 50,\n        right: 5\n    }\n\n\n    useEffect(() => {\n        const svg = select(svgRef.current)\n        if (!dimensions) return\n        const {width, height} = dimensions;\n\n        const xScale = scaleTime().range([margin.left, width - margin.right]);\n        const yScale = scaleLinear().range([height - margin.bottom, margin.top]);\n        const lineG = line()\n        const xAxis = axisBottom().scale(xScale)\n            .tickFormat(timeFormat('%d %b'))\n        const yAxis = axisLeft().scale(yScale);\n\n        data = data.slice(-days);\n        const dateDomain = extent(data, d => d.date);\n        const confirmedMax = max(data, d => d.confirmed);\n        xScale.domain(dateDomain)\n        yScale.domain([0, confirmedMax])\n        lineG.x(d => xScale(d.date))\n        lineG.y(d => yScale(d.confirmed))\n        const confirmed = lineG(data)\n        lineG.y(d => yScale(d.deaths))\n        const deaths = lineG(data)\n        lineG.y(d => yScale(d.recovered))\n        const recovered = lineG(data)\n\n        svg.append('path')\n            .attr('d', confirmed)\n            .attr('fill', 'none')\n            .attr('stroke', 'blue')\n            .attr('stroke-width', '2.5px')\n        svg.append('path')\n            .attr('d', deaths)\n            .attr('fill', 'none')\n            .attr('stroke', 'red')\n            .attr('stroke-width', '2.5px')\n        svg.append('path')\n            .attr('d', recovered)\n            .attr('fill', 'none')\n            .attr('stroke', 'green')\n            .attr('stroke-width', '2.5px')\n\n        select(xAxisRef.current).call(xAxis).attr('transform', `translate(0,${height - margin.bottom})`);\n        select(yAxisRef.current).call(yAxis).attr('transform', `translate(${margin.left},0)`);\n\n\n    }, [data, dimensions])\n\n    return (\n        <div ref={wrapperDivRef}>\n            <svg ref={svgRef}>\n                <g>\n                    <g ref={xAxisRef}/>\n                    <g ref={yAxisRef}/>\n                </g>\n            </svg>\n        </div>\n    );\n}\n\nexport default LineChart;","import React, {useEffect, useState} from 'react';\nimport LineChart from \"./LineChart\";\n\nfunction Line({inputData}) {\n\n    const [data, setData] = useState({})\n    const [type, setType] = useState('confirmed')\n    const [days, setDays] = useState(40)\n    useEffect(() => {\n        setData(inputData)\n    }, [inputData])\n\n\n    if (Object.keys(inputData).length < 1) return ('Loading...')\n    return (\n        <div className='barD'>\n\n            <LineChart data={data}/>\n\n        </div>\n    );\n}\n\nexport default Line;","import React, {useEffect, useRef} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleLinear, scaleTime} from 'd3-scale'\nimport {extent, max} from 'd3-array'\nimport {timeFormat} from 'd3-time-format'\nimport {axisBottom, axisLeft} from 'd3-axis'\n\n\nfunction BarChart({data, days, type}) {\n    const svgRef = useRef()\n    const wrapperDivRef = useRef()\n    const xAxisRef = useRef()\n    const yAxisRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 50,\n        right: 5\n    }\n    useEffect(() => {\n        const svg = select(svgRef.current)\n        if (!dimensions) return\n        const {width, height} = dimensions;\n\n        data = data.slice(-days)\n        data = data.map(d => {\n            return {\n                date: d.date,\n                input: d[type]\n            }\n        });\n        const gap = 1.15;\n        const bar = (width - margin.left - margin.right) / data.length / gap;\n        const xScale = scaleTime().range([margin.left, width - margin.right]);\n        const yScale = scaleLinear().range([height - margin.bottom, margin.top]);\n        const xAxis = axisBottom().scale(xScale)\n            .tickFormat(timeFormat('%d %b'))\n        const yAxis = axisLeft().scale(yScale);\n        const dateDomain = extent(data, d => d.date);\n        const inputMax = max(data, d => d.input);\n        xScale.domain(dateDomain)\n        yScale.domain([0, inputMax])\n\n        select(xAxisRef.current)\n            .call(xAxis)\n            .attr('transform', `translate(0,${height - margin.bottom})`);\n\n        select(yAxisRef.current)\n            .call(yAxis)\n            .attr('transform', `translate(${margin.left},0)`);\n\n        svg\n            .selectAll('.rect')\n            .data(data)\n            .join(enter => enter.append('rect'))\n            .attr('class', '.rect')\n            .attr('x', (d, i) => margin.left + (i * bar * gap))\n            .attr('y', d => {\n                return yScale(d.input)\n            })\n            .style('fill', 'blue')\n            .attr('height', d => {\n                return height - yScale(d.input) - margin.bottom\n            })\n            .attr('width', bar)\n\n\n    }, [data, dimensions])\n\n    return (\n        <div ref={wrapperDivRef}>\n            <svg ref={svgRef}>\n                <g>\n                    <g ref={xAxisRef}/>\n                    <g ref={yAxisRef}/>\n                </g>\n            </svg>\n        </div>\n    );\n}\n\nexport default BarChart;","import React, {useEffect, useState} from 'react';\nimport BarChart from \"./BarChart\";\n\nfunction Bar({inputData}) {\n\n    const [data, setData] = useState({})\n    const [type, setType] = useState('confirmed')\n    const [days, setDays] = useState(40)\n\n    useEffect(() => {\n        setData(inputData)\n    }, [inputData])\n\n\n    if (Object.keys(inputData).length < 1) return ('Loading...')\n    return (\n        <div className='barD'>\n\n            <BarChart data={data} type={type} days={days}/>\n\n        </div>\n    );\n}\n\nexport default Bar;","import React, {useEffect, useRef, useState} from 'react';\nimport useResizeObserver from \"../../Hooks/useResizeObserver\";\nimport {select} from 'd3-selection'\nimport {scaleLinear} from 'd3-scale'\nimport {max, min} from 'd3-array'\nimport {geoMercator, geoPath} from 'd3-geo'\n\nfunction WorldMap({data, type, world}) {\n    const svgRef = useRef()\n    const wrapperDivRef = useRef()\n    const dimensions = useResizeObserver(wrapperDivRef)\n    const [sel, setSel] = useState(null)\n\n    useEffect(() => {\n        if (!dimensions) return\n        const svg = select(svgRef.current)\n        const minV = min(Object.entries(data), d => d[1][0][type]);\n        const maxV = max(Object.entries(data), d => d[1][0][type]);\n        const cscale = scaleLinear()\n            .domain([minV, 30000, maxV])\n            .range(['#fff', '#ff9090', '#ff5050'])\n\n        const projection = geoMercator()\n            .fitSize([dimensions.width, dimensions.height], sel || world)\n            .precision(100)\n\n\n        const pathGen = geoPath().projection(projection)\n\n\n        svg.selectAll('.country')\n            .data(world.features)\n            .join('path')\n            .on('click', d => {\n                return setSel(sel === d ? null : d)\n            })\n            .attr('class', 'country')\n            .transition()\n\n            .attr('fill', f =>\n                (data[f.properties.name]) ? cscale(data[f.properties.name][0][type])\n                    : '#fff'\n            )\n            .attr('d', f => pathGen(f))\n\n        svg.selectAll(\".label\")\n            .data([sel])\n            .join('text')\n            .attr('class', 'label')\n            .text(\n                f =>\n                    f &&\n                    f.properties.name + ': ' + ((data[f.properties.name]) ? (data[f.properties.name][0][type])\n                    : 0)\n            )\n            .attr('x', 10)\n            .attr('y', 25)\n\n    }, [data, dimensions, type, world, sel])\n\n    return (\n        <div ref={wrapperDivRef} style={{marginBottom: '2rem'}}>\n            <svg ref={svgRef} style={{backgroundColor: '#c5e8ff'}}>\n            </svg>\n        </div>\n    );\n}\n\nexport default WorldMap;","import React, {useEffect, useState} from 'react';\nimport WorldMap from \"./WorldMap\";\nimport land from '../../world.json'\n\nfunction World({inputData}) {\n\n    const [data, setData] = useState({})\n    const [type, setType] = useState('confirmed')\n    useEffect(() => {\n        setData(inputData)\n    }, [inputData, type])\n\n    if (Object.keys(data).length < 1) return ('Loading...')\n    return (\n        <div>\n            <h1> World Map Geo</h1>\n            <WorldMap data={data} world={land} type={type}/>\n        </div>\n    );\n}\n\nexport default World;","import React, {useEffect, useState} from 'react';\nimport dataset from './timeseries.json'\nimport Race from \"./Charts/Race/Race\";\nimport Line from \"./Charts/Line/Line\";\nimport Bar from \"./Charts/Bar/Bar\";\nimport World from \"./Charts/World/World\";\n\nfunction Charts(props) {\n\n    const [data, setData] = useState({})\n    const [latestDataset, setLatestDataset] = useState({})\n    const [startDate, setStartDate] = useState(null)\n    const [endDate, setEndDate] = useState(null)\n\n\n    useEffect(() => {\n        const defaultCountry = 'Canada'\n        const latestDataset = {}\n\n        for (const key in dataset) {\n            latestDataset[key] = dataset[key].filter((d, i, arr) => {\n                d.date = new Date(d.date)\n\n                return (i === arr.length - 1)\n            })\n\n\n        }\n        const defaultCountryObj = dataset[defaultCountry];\n        const days = defaultCountryObj.length\n        const startDate = defaultCountryObj[0].date\n        const endDate = defaultCountryObj[days - 1].date\n        setStartDate(startDate)\n        setEndDate(endDate)\n        setData(dataset)\n        setLatestDataset(latestDataset)\n\n\n    }, [])\n\n    if (Object.keys(data).length < 1) return ('loading')\n    return (\n        <div className='charts'>\n            <Race inputData={data} startDate={startDate} endDate={endDate}/>\n            <Line inputData={data['Canada']}/>\n            <Bar inputData={data['Canada']}/>\n            <World inputData={latestDataset}/>\n        </div>\n    );\n}\n\nexport default Charts;","import React from 'react';\nimport Charts from \"./Charts\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <header>\n              COVID-19\n          </header>\n          <Charts/>\n          <footer>\n              Rishabh Kharbanda\n          </footer>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}